1. Unclear separation between normalTokens and reservedTokens

Status: 
We decide to register as many reserved tokens as possible during the deployment phase to avoid this issue. 
ReservedTokens are tokens that users are allowed to use to pay fees.

2. Missing range checks in MulDivGadget

Status: 
Muldivgadget is used to calculate the handling charge of spottrade and batchspottrade.

The code:
    product(pb, value, numerator, FMT(prefix, ".product")),
    assert(numBitsValue + numBitsNumerator <= NUM_BITS_FIELD_CAPACITY)

The length of numBitsNumerator in FeeCalculatorGadget is no more than 6 bits, while NUM_BITS_FIELD_CAPACITY = 253, the length of amount numBitsValue < = 247

That is, the maximum value supported is 247bits, while the maximum value supported here is 96bits. Therefore, there will be no problem for the time being. If there is a problem, the circuit will crash.


3. Code management bad practice increases the likelihood of mistakes

Status: 
In internal repository, code changes are submitted based on user stories or issues.


4. Token management difficulties caused by the addition of arbitrary tokens

Status: 
We will add a warning about this limitation on front-end.


5. Initialization functions can be front-run

Status: 
Ignored. We will ensure the deployment and initialization are correctã€‚


6. Circuit crashes when invalid blocks are generated by the operator

Status: 
The wrong data provided by the operator will indeed lead to circuit crash, which is an expected phenomenon. If not, there will be other problems.


7. Saving large JSON integers could result in interoperability issues

Status: 
The amount mentioned here is the filled value in SpotTrade. The value had been handled by float32 format. so just 32bits. 
There will be no problem. If it exceeds 32, the circuit will crash.

8. Lack of contract existence check on delegatecall will result in unexpected behavior

Status: 
Ignored. We don't plan to use proxy in product.


9. Numerical comparison gadget does not support very large numbers

Status: 
Due to FTT, libsnark supports a maximum amount of 252 power of 2. Now it has supported 248bits in balance change, recharge and withdrawal. 
The total balance which deposited by user in smart contract is limited by 248bits, so there will be no problem in the circuit.


10. Solidity compiler optimizations can be problematic

Status: 
We will keep the current optimization switch and evaluate it later.


11. Circuits rely on undefined behavior in lib

Status: 
This issue is  still under investigation.
