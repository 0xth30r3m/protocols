import BN = require("bn.js");
import txDecoder = require("ethereum-tx-decoder");
import abi = require("ethereumjs-abi");
import {RingInfo} from "./types";

export class TxParser {
  public protocolAbi: string;

  constructor(protocolAbi: string) {
    this.protocolAbi = protocolAbi;
  }

  public parseSubmitRingTx(txRaw: string) {
    const fnDecoder = new txDecoder.FunctionDecoder(this.protocolAbi);
    const decodedTx = txDecoder.decodeTx(txRaw);
    const arrayish = fnDecoder.decodeFn(decodedTx.data);

    const miner = arrayish[7];

    const orderOwners: string[] = [];
    const tokenAddressList: string[] = [];
    for (const addrs of arrayish[0]) {
      orderOwners.push(addrs[0]);
      tokenAddressList.push(addrs[1]);
    }

    const amountSList: number[] = [];
    const amountBList: number[] = [];
    const lrcFeeAmountList: number[] = [];
    for (const amounts of arrayish[1]) {
      amountSList.push(this.bnToNumber(amounts[0]));
      amountBList.push(this.bnToNumber(amounts[1]));
      lrcFeeAmountList.push(this.bnToNumber(amounts[4]));
    }

    const buyNoMoreThanAmountBList = arrayish[3];

    const feeSelectionNumber = arrayish[8];
    const ringSize = tokenAddressList.length;
    const feeSelections = this.feeSelectionNumberToArray(feeSelectionNumber, ringSize);

    const ringInfo: RingInfo = {
      miner,
      orderOwners,
      tokenAddressList,
      amountSList,
      amountBList,
      lrcFeeAmountList,
      buyNoMoreThanAmountBList,
      feeSelections,
    };

    return ringInfo;
  }

  private feeSelectionNumberToArray(fsn: number, ringSize: number) {
    const feeSelectionList: number[] = [];
    for (let i = ringSize - 1; i >= 0; i--) {
      const feeSelection = (fsn >> i) % 2;
      feeSelectionList.push(feeSelection);
    }
    return feeSelectionList;
  }

  private bnToNumber(bn: any) {
    const bnStr = bn.toString(10);
    return parseInt(bnStr, 10);
  }

}

function main() {
  const protocolAbi = '[{"constant":true,"inputs":[],"name":"MARGIN_SPLIT_PERCENTAGE_BASE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ringIndex","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"RATE_RATIO_SCALE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lrcTokenAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenRegistryAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"delegateAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"orderOwner","type":"address"},{"name":"token1","type":"address"},{"name":"token2","type":"address"}],"name":"getTradingPairCutoffs","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"token1","type":"address"},{"name":"token2","type":"address"},{"name":"cutoff","type":"uint256"}],"name":"cancelAllOrdersByTradingPair","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"addresses","type":"address[5]"},{"name":"orderValues","type":"uint256[6]"},{"name":"buyNoMoreThanAmountB","type":"bool"},{"name":"marginSplitPercentage","type":"uint8"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"cancelOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_RING_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"cutoff","type":"uint256"}],"name":"cancelAllOrders","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"rateRatioCVSThreshold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"addressList","type":"address[4][]"},{"name":"uintArgsList","type":"uint256[6][]"},{"name":"uint8ArgsList","type":"uint8[1][]"},{"name":"buyNoMoreThanAmountBList","type":"bool[]"},{"name":"vList","type":"uint8[]"},{"name":"rList","type":"bytes32[]"},{"name":"sList","type":"bytes32[]"},{"name":"feeRecipient","type":"address"},{"name":"feeSelections","type":"uint16"}],"name":"submitRing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"walletSplitPercentage","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_ringIndex","type":"uint256"},{"indexed":true,"name":"_ringHash","type":"bytes32"},{"indexed":false,"name":"_miner","type":"address"},{"indexed":false,"name":"_feeRecipient","type":"address"},{"indexed":false,"name":"_orderInfoList","type":"bytes32[]"}],"name":"RingMined","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_orderHash","type":"bytes32"},{"indexed":false,"name":"_amountCancelled","type":"uint256"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_address","type":"address"},{"indexed":false,"name":"_cutoff","type":"uint256"}],"name":"AllOrdersCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_address","type":"address"},{"indexed":false,"name":"_token1","type":"address"},{"indexed":false,"name":"_token2","type":"address"},{"indexed":false,"name":"_cutoff","type":"uint256"}],"name":"OrdersCancelled","type":"event"}]'; // tslint:disable-line

  const data = "0xf906ed8204aa850122a0a4388307a120948d8812b72d1e4ffcec158d25f56748b7d67c1e7880b90684e78aadb20000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000003acdf3e3d8ec52a768083f718e763727b0210650000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000004175015b30ff8d116989cdf61f4c7dba15d422ff0000000000000000000000001b793e49237758dbd8b752afc9eb4b329d5da016000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a5820000000000000000000000008707b516d389fa34fcfbdbd4f0983e05a962c45200000000000000000000000024f3329d2aa3c95a2b8af817086b3ad40b18bc36000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a582000000000000000000000000197e4d8ba534e0dc263385bc90963ddb765eadcb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000001afab16ef614e9f8000000000000000000000000000000000000000000000000000184fc2608c7c08000000000000000000000000000000000000000000000000000000000005aede11c000000000000000000000000000000000000000000000000000000005aef329c0000000000000000000000000000000000000000000000029bcc950c9fcc000000000000000000000000000000000000000000000000190f37c4ccd6724620160000000000000000000000000000000000000000000000000b19f0a4ee66f0000000000000000000000000000000000000000000000000aa0e9ecf7630640000000000000000000000000000000000000000000000000000000000005aef1171000000000000000000000000000000000000000000000000000000005af062f100000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000a4fb5aa9419a1bc000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000004af6c81ea6d9d74d66d173c3f6e023cfe8dccce9dd7c441e2f8decf607e8eed69e2d671e48162db93cb2091c2a444f686fbb8c0f76c971d4e6e57f333546acfd7f1c4cff18111098b3348b96103a4ab0ff8f4376520c150b750f05252cef37237067303343454119e1839bf6e5a2cb0ffae2205cdf470a96de99b3f5b4c7a8a6a00000000000000000000000000000000000000000000000000000000000000045ba6b7da4a2d50c052a4ac7e08ad79d5c6e9d619e1ecfde375c3d4464591e1140a6a549a29df1fbecf9538d9b74c4da04d2c31873b0fc9b6afa322882cf521722b612b2ce8b802a1fe6eadbbdb0453fa3405129af61dcbb1d433f8da7d49c0515ade6f506c70c9b1049d84e7a5e9edcb7fd12e0c275926bbd3568c7eb2fcb2b51ba011d205631fed47bb256beaeb77a761ec3684851659b880d6f46e0fd2952b3d6da007efbf71ef8cb8beb6713765d96abd2e43fcb5593ad2cf6834b9fd398c11d267"; // tslint:disable-line

  const parser = new TxParser(protocolAbi);
  // const res = parser.parseSubmitRingTx(data);
  // console.log("res:", res);

  const data2 = "0xf906ed8203f28502540be4008307a120948d8812b72d1e4ffcec158d25f56748b7d67c1e7880b90684e78aadb20000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000003acdf3e3d8ec52a768083f718e763727b0210650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004175015b30ff8d116989cdf61f4c7dba15d422ff0000000000000000000000001b793e49237758dbd8b752afc9eb4b329d5da016000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a5820000000000000000000000008960e98818923480de200a2c7a99ada557386f920000000000000000000000004fca076ea95f4d5b67b89caacc5db3b2e98eda02000000000000000000000000ef68e7c694f40c8202821edf525de3782458639f000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a5820000000000000000000000008de76eb2c2f281ec01f891eaf0fdd6b7918626b700000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000026e00deb4b94591c000000000000000000000000000000000000000000000000074efc790916c4fa0000000000000000000000000000000000000000000000000000000000005aeb553d000000000000000000000000000000000000000000000000000000005aeca6bd000000000000000000000000000000000000000000000003bdd84c50fd7600000000000000000000000000000000000000000000000026d591b4d8ce3ce4287a000000000000000000000000000000000000000000000112ca8e0cb7422888000000000000000000000000000000000000000000000005b293c23de704280000000000000000000000000000000000000000000000000000000000005aec723f000000000000000000000000000000000000000000000000000000005aedc3bf0000000000000000000000000000000000000000000000008c94fd5436b500000000000000000000000000000000000000000000000001128070918fda0a372ac000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000004c2b34d4bb9aa0a4e8209512f2705a20cf7cd38227163beb3005837b8c1f50b44f080721c2abff7aed55245d97e77e18e40d6551bbe441bfe3049f768e6422a41f429dedbafd4e153f61df269f30729af34bf644a09dd63c85e5a2cbfd6c036ac6bc32c333be7e3ea511091d7c8334df3a52cf4651553922e957939a7d1d960be00000000000000000000000000000000000000000000000000000000000000046aa9edbeb21af4be28a8a2793b0063b445d0acdb5dcb66623622ed22496b2ff73d81c613082c4965017391da610357827c6d0c6f599149e1812df3e2d55391e17cc9105f34fbcf910a5620c4ef227811c747d6d70c69defbc043c20ff84403b40e7c8a438ec8f583cbcb7ab6c9bb58c0ca8800f14ba6f9b1abc0b84028d406d61ca0714d39a12e72ec84b31eb9d90306915aa9770b5ac87d1b458b054936b2a2795ea00e9054c1f351f7345264de07a06245fb038a151a6bb65831a7e4acf07ea244bc"; // tslint:disable-line

  const res = parser.parseSubmitRingTx(data2);
  console.log("res:", res);

}

// main();
