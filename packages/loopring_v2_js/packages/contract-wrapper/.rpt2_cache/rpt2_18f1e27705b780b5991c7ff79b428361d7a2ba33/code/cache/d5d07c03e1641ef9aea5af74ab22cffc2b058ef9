{"code":"import * as _ from 'lodash';\r\nexport var NetworkId;\r\n(function (NetworkId) {\r\n    NetworkId[NetworkId[\"Mainnet\"] = 1] = \"Mainnet\";\r\n    NetworkId[NetworkId[\"Ropsten\"] = 3] = \"Ropsten\";\r\n    NetworkId[NetworkId[\"Rinkeby\"] = 4] = \"Rinkeby\";\r\n    NetworkId[NetworkId[\"Kovan\"] = 42] = \"Kovan\";\r\n})(NetworkId || (NetworkId = {}));\r\nvar NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\r\nvar networkToAddresses = {\r\n    1: {\r\n        tradeDelegate: '0x2240dab907db71e64d3e0dba4800c83b5c502d4e',\r\n    },\r\n    3: {\r\n        tradeDelegate: '0xb1408f4c245a23c31b98d2c626777d4c0d766caa',\r\n    },\r\n    4: {\r\n        tradeDelegate: '0xbce0b5f6eb618c565c3e5f5cd69652bbc279f44e',\r\n    },\r\n    42: {\r\n        tradeDelegate: '0xf1ec01d6236d3cd881a0bf0130ea25fe4234003e',\r\n    },\r\n};\r\n/**\r\n * Used to get addresses of contracts that have been deployed to either the\r\n * Ethereum mainnet or a supported testnet. Throws if there are no known\r\n * contracts deployed on the corresponding network.\r\n * @param networkId The desired networkId.\r\n * @returns The set of addresses for contracts which have been deployed on the\r\n * given networkId.\r\n */\r\nexport function getContractAddressesForNetworkOrThrow(networkId) {\r\n    if (_.isUndefined(networkToAddresses[networkId])) {\r\n        throw new Error(\"Invalid network id (\" + networkId + \").\");\r\n    }\r\n    return networkToAddresses[networkId];\r\n}\r\n//# sourceMappingURL=contract-addresses.js.map","map":"{\"version\":3,\"file\":\"contract-addresses.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/contract-addresses.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAN,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,+CAAe,CAAA;IACf,+CAAe,CAAA;IACf,+CAAe,CAAA;IACf,4CAAgB,CAAA;AACpB,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;AAMD,IAAM,YAAY,GAAG,4CAA4C,CAAC;AAElE,IAAM,kBAAkB,GAA+C;IACnE,CAAC,EAAE;QACC,aAAa,EAAE,4CAA4C;KAC9D;IACD,CAAC,EAAE;QACC,aAAa,EAAE,4CAA4C;KAC9D;IACD,CAAC,EAAE;QACC,aAAa,EAAE,4CAA4C;KAC9D;IACD,EAAE,EAAE;QACA,aAAa,EAAE,4CAA4C;KAC9D;CACJ,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,UAAU,qCAAqC,CACjD,SAAoB;IACpB,IAAI,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,EAAE;QAC9C,MAAM,IAAI,KAAK,CAAC,yBAAuB,SAAS,OAAI,CAAC,CAAC;KACzD;IACD,OAAO,kBAAkB,CAAC,SAAS,CAAC,CAAC;AACzC,CAAC\"}","dts":{"name":"/Users/d/Projects/loopring/protocols/packages/loopring_v2.js/packages/contract-addresses/dist/types/contract-addresses.d.ts","writeByteOrderMark":false,"text":"export declare enum NetworkId {\r\n    Mainnet = 1,\r\n    Ropsten = 3,\r\n    Rinkeby = 4,\r\n    Kovan = 42\r\n}\r\nexport interface LoopringAddresses {\r\n    tradeDelegate: string;\r\n}\r\n/**\r\n * Used to get addresses of contracts that have been deployed to either the\r\n * Ethereum mainnet or a supported testnet. Throws if there are no known\r\n * contracts deployed on the corresponding network.\r\n * @param networkId The desired networkId.\r\n * @returns The set of addresses for contracts which have been deployed on the\r\n * given networkId.\r\n */\r\nexport declare function getContractAddressesForNetworkOrThrow(networkId: NetworkId): LoopringAddresses;\r\n"}}
